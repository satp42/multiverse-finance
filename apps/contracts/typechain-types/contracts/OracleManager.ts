/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface OracleManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorizedOracles"
      | "conditionalToken"
      | "events"
      | "getEventOutcome"
      | "getEventStatus"
      | "getPendingEvents"
      | "isEventResolved"
      | "owner"
      | "registerEvent"
      | "renounceOwnership"
      | "setOracleAuthorization"
      | "submitOutcome"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EventRegistered"
      | "EventResolved"
      | "OracleAuthorized"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "authorizedOracles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "conditionalToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "events", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getEventOutcome",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEventStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingEvents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isEventResolved",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerEvent",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleAuthorization",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "submitOutcome",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizedOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "conditionalToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "events", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEventOutcome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEventStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEventResolved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitOutcome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace EventRegisteredEvent {
  export type InputTuple = [eventId: BytesLike, oracle: AddressLike];
  export type OutputTuple = [eventId: string, oracle: string];
  export interface OutputObject {
    eventId: string;
    oracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventResolvedEvent {
  export type InputTuple = [eventId: BytesLike, outcome: BytesLike];
  export type OutputTuple = [eventId: string, outcome: string];
  export interface OutputObject {
    eventId: string;
    outcome: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleAuthorizedEvent {
  export type InputTuple = [oracle: AddressLike, authorized: boolean];
  export type OutputTuple = [oracle: string, authorized: boolean];
  export interface OutputObject {
    oracle: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OracleManager extends BaseContract {
  connect(runner?: ContractRunner | null): OracleManager;
  waitForDeployment(): Promise<this>;

  interface: OracleManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorizedOracles: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  conditionalToken: TypedContractMethod<[], [string], "view">;

  events: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, boolean, string, bigint] & {
        oracle: string;
        resolved: boolean;
        outcome: string;
        registrationTime: bigint;
      }
    ],
    "view"
  >;

  getEventOutcome: TypedContractMethod<[eventId: BytesLike], [string], "view">;

  getEventStatus: TypedContractMethod<
    [eventId: BytesLike],
    [
      [string, boolean, string, bigint] & {
        oracle: string;
        resolved: boolean;
        outcome: string;
        registrationTime: bigint;
      }
    ],
    "view"
  >;

  getPendingEvents: TypedContractMethod<[], [string[]], "view">;

  isEventResolved: TypedContractMethod<[eventId: BytesLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  registerEvent: TypedContractMethod<
    [eventId: BytesLike, oracle: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setOracleAuthorization: TypedContractMethod<
    [oracle: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  submitOutcome: TypedContractMethod<
    [eventId: BytesLike, outcome: BytesLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorizedOracles"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "conditionalToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "events"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, boolean, string, bigint] & {
        oracle: string;
        resolved: boolean;
        outcome: string;
        registrationTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEventOutcome"
  ): TypedContractMethod<[eventId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getEventStatus"
  ): TypedContractMethod<
    [eventId: BytesLike],
    [
      [string, boolean, string, bigint] & {
        oracle: string;
        resolved: boolean;
        outcome: string;
        registrationTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPendingEvents"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "isEventResolved"
  ): TypedContractMethod<[eventId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerEvent"
  ): TypedContractMethod<
    [eventId: BytesLike, oracle: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOracleAuthorization"
  ): TypedContractMethod<
    [oracle: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitOutcome"
  ): TypedContractMethod<
    [eventId: BytesLike, outcome: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "EventRegistered"
  ): TypedContractEvent<
    EventRegisteredEvent.InputTuple,
    EventRegisteredEvent.OutputTuple,
    EventRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "EventResolved"
  ): TypedContractEvent<
    EventResolvedEvent.InputTuple,
    EventResolvedEvent.OutputTuple,
    EventResolvedEvent.OutputObject
  >;
  getEvent(
    key: "OracleAuthorized"
  ): TypedContractEvent<
    OracleAuthorizedEvent.InputTuple,
    OracleAuthorizedEvent.OutputTuple,
    OracleAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "EventRegistered(bytes32,address)": TypedContractEvent<
      EventRegisteredEvent.InputTuple,
      EventRegisteredEvent.OutputTuple,
      EventRegisteredEvent.OutputObject
    >;
    EventRegistered: TypedContractEvent<
      EventRegisteredEvent.InputTuple,
      EventRegisteredEvent.OutputTuple,
      EventRegisteredEvent.OutputObject
    >;

    "EventResolved(bytes32,bytes32)": TypedContractEvent<
      EventResolvedEvent.InputTuple,
      EventResolvedEvent.OutputTuple,
      EventResolvedEvent.OutputObject
    >;
    EventResolved: TypedContractEvent<
      EventResolvedEvent.InputTuple,
      EventResolvedEvent.OutputTuple,
      EventResolvedEvent.OutputObject
    >;

    "OracleAuthorized(address,bool)": TypedContractEvent<
      OracleAuthorizedEvent.InputTuple,
      OracleAuthorizedEvent.OutputTuple,
      OracleAuthorizedEvent.OutputObject
    >;
    OracleAuthorized: TypedContractEvent<
      OracleAuthorizedEvent.InputTuple,
      OracleAuthorizedEvent.OutputTuple,
      OracleAuthorizedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MultiverseAMMInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addLiquidity"
      | "conditionalToken"
      | "createPool"
      | "evaporateVerse"
      | "getAmountOut"
      | "getReserves"
      | "getUserShares"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "owner"
      | "pools"
      | "removeLiquidity"
      | "renounceOwnership"
      | "supportsInterface"
      | "swap"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LiquidityAdded"
      | "LiquidityRemoved"
      | "OwnershipTransferred"
      | "PoolCreated"
      | "PoolEvaporated"
      | "Swap"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "conditionalToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "evaporateVerse",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [BigNumberish, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserShares",
    values: [BytesLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pools",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "conditionalToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "evaporateVerse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace LiquidityAddedEvent {
  export type InputTuple = [
    verseId: BytesLike,
    tokenA: BigNumberish,
    tokenB: BigNumberish,
    provider: AddressLike,
    amountA: BigNumberish,
    amountB: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    verseId: string,
    tokenA: bigint,
    tokenB: bigint,
    provider: string,
    amountA: bigint,
    amountB: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    verseId: string;
    tokenA: bigint;
    tokenB: bigint;
    provider: string;
    amountA: bigint;
    amountB: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityRemovedEvent {
  export type InputTuple = [
    verseId: BytesLike,
    tokenA: BigNumberish,
    tokenB: BigNumberish,
    provider: AddressLike,
    amountA: BigNumberish,
    amountB: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    verseId: string,
    tokenA: bigint,
    tokenB: bigint,
    provider: string,
    amountA: bigint,
    amountB: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    verseId: string;
    tokenA: bigint;
    tokenB: bigint;
    provider: string;
    amountA: bigint;
    amountB: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolCreatedEvent {
  export type InputTuple = [
    verseId: BytesLike,
    tokenA: BigNumberish,
    tokenB: BigNumberish
  ];
  export type OutputTuple = [verseId: string, tokenA: bigint, tokenB: bigint];
  export interface OutputObject {
    verseId: string;
    tokenA: bigint;
    tokenB: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolEvaporatedEvent {
  export type InputTuple = [
    verseId: BytesLike,
    tokenA: BigNumberish,
    tokenB: BigNumberish
  ];
  export type OutputTuple = [verseId: string, tokenA: bigint, tokenB: bigint];
  export interface OutputObject {
    verseId: string;
    tokenA: bigint;
    tokenB: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapEvent {
  export type InputTuple = [
    verseId: BytesLike,
    tokenIn: BigNumberish,
    tokenOut: BigNumberish,
    user: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    verseId: string,
    tokenIn: bigint,
    tokenOut: bigint,
    user: string,
    amountIn: bigint,
    amountOut: bigint
  ];
  export interface OutputObject {
    verseId: string;
    tokenIn: bigint;
    tokenOut: bigint;
    user: string;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MultiverseAMM extends BaseContract {
  connect(runner?: ContractRunner | null): MultiverseAMM;
  waitForDeployment(): Promise<this>;

  interface: MultiverseAMMInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addLiquidity: TypedContractMethod<
    [
      verseId: BytesLike,
      tokenA: BigNumberish,
      tokenB: BigNumberish,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        amountA: bigint;
        amountB: bigint;
        shares: bigint;
      }
    ],
    "nonpayable"
  >;

  conditionalToken: TypedContractMethod<[], [string], "view">;

  createPool: TypedContractMethod<
    [verseId: BytesLike, tokenA: BigNumberish, tokenB: BigNumberish],
    [void],
    "nonpayable"
  >;

  evaporateVerse: TypedContractMethod<
    [verseId: BytesLike],
    [void],
    "nonpayable"
  >;

  getAmountOut: TypedContractMethod<
    [
      amountIn: BigNumberish,
      verseId: BytesLike,
      tokenIn: BigNumberish,
      tokenOut: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getReserves: TypedContractMethod<
    [verseId: BytesLike, tokenA: BigNumberish, tokenB: BigNumberish],
    [[bigint, bigint] & { reserveA: bigint; reserveB: bigint }],
    "view"
  >;

  getUserShares: TypedContractMethod<
    [
      verseId: BytesLike,
      tokenA: BigNumberish,
      tokenB: BigNumberish,
      user: AddressLike
    ],
    [bigint],
    "view"
  >;

  onERC1155BatchReceived: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  onERC1155Received: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pools: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish, arg2: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        reserveA: bigint;
        reserveB: bigint;
        totalShares: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  removeLiquidity: TypedContractMethod<
    [
      verseId: BytesLike,
      tokenA: BigNumberish,
      tokenB: BigNumberish,
      shares: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish
    ],
    [[bigint, bigint] & { amountA: bigint; amountB: bigint }],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  swap: TypedContractMethod<
    [
      verseId: BytesLike,
      tokenIn: BigNumberish,
      tokenOut: BigNumberish,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [
      verseId: BytesLike,
      tokenA: BigNumberish,
      tokenB: BigNumberish,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        amountA: bigint;
        amountB: bigint;
        shares: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "conditionalToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createPool"
  ): TypedContractMethod<
    [verseId: BytesLike, tokenA: BigNumberish, tokenB: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "evaporateVerse"
  ): TypedContractMethod<[verseId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAmountOut"
  ): TypedContractMethod<
    [
      amountIn: BigNumberish,
      verseId: BytesLike,
      tokenIn: BigNumberish,
      tokenOut: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReserves"
  ): TypedContractMethod<
    [verseId: BytesLike, tokenA: BigNumberish, tokenB: BigNumberish],
    [[bigint, bigint] & { reserveA: bigint; reserveB: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserShares"
  ): TypedContractMethod<
    [
      verseId: BytesLike,
      tokenA: BigNumberish,
      tokenB: BigNumberish,
      user: AddressLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC1155BatchReceived"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC1155Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pools"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish, arg2: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        reserveA: bigint;
        reserveB: bigint;
        totalShares: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeLiquidity"
  ): TypedContractMethod<
    [
      verseId: BytesLike,
      tokenA: BigNumberish,
      tokenB: BigNumberish,
      shares: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish
    ],
    [[bigint, bigint] & { amountA: bigint; amountB: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "swap"
  ): TypedContractMethod<
    [
      verseId: BytesLike,
      tokenIn: BigNumberish,
      tokenOut: BigNumberish,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "LiquidityAdded"
  ): TypedContractEvent<
    LiquidityAddedEvent.InputTuple,
    LiquidityAddedEvent.OutputTuple,
    LiquidityAddedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityRemoved"
  ): TypedContractEvent<
    LiquidityRemovedEvent.InputTuple,
    LiquidityRemovedEvent.OutputTuple,
    LiquidityRemovedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PoolCreated"
  ): TypedContractEvent<
    PoolCreatedEvent.InputTuple,
    PoolCreatedEvent.OutputTuple,
    PoolCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PoolEvaporated"
  ): TypedContractEvent<
    PoolEvaporatedEvent.InputTuple,
    PoolEvaporatedEvent.OutputTuple,
    PoolEvaporatedEvent.OutputObject
  >;
  getEvent(
    key: "Swap"
  ): TypedContractEvent<
    SwapEvent.InputTuple,
    SwapEvent.OutputTuple,
    SwapEvent.OutputObject
  >;

  filters: {
    "LiquidityAdded(bytes32,uint256,uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;
    LiquidityAdded: TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;

    "LiquidityRemoved(bytes32,uint256,uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      LiquidityRemovedEvent.InputTuple,
      LiquidityRemovedEvent.OutputTuple,
      LiquidityRemovedEvent.OutputObject
    >;
    LiquidityRemoved: TypedContractEvent<
      LiquidityRemovedEvent.InputTuple,
      LiquidityRemovedEvent.OutputTuple,
      LiquidityRemovedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PoolCreated(bytes32,uint256,uint256)": TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;
    PoolCreated: TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;

    "PoolEvaporated(bytes32,uint256,uint256)": TypedContractEvent<
      PoolEvaporatedEvent.InputTuple,
      PoolEvaporatedEvent.OutputTuple,
      PoolEvaporatedEvent.OutputObject
    >;
    PoolEvaporated: TypedContractEvent<
      PoolEvaporatedEvent.InputTuple,
      PoolEvaporatedEvent.OutputTuple,
      PoolEvaporatedEvent.OutputObject
    >;

    "Swap(bytes32,uint256,uint256,address,uint256,uint256)": TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;
    Swap: TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;
  };
}
